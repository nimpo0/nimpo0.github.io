const express = require('express');
const router = express.Router();
const { db } = require('../firebaseConfig'); 
const { authenticateToken } = require('../auth'); 

router.post('/', authenticateToken, async (req, res) => {
  const { carId, quantity, startDate, endDate } = req.body;
  const userId = req.user.userId; 

  try {
    const carRef = db.collection('cars').doc(carId);
    const carSnap = await carRef.get();

    if (!carSnap.exists) {
      return res.status(404).json({ message: 'Автомобіль не знайдено' });
    }

    const carData = carSnap.data();

    const start = new Date(startDate);
    const end = new Date(endDate);

    const bookingsSnap = await db.collection('bookings')
      .where('carId', '==', carId)
      .get();

    let reservedDuringPeriod = 0;

    bookingsSnap.forEach(doc => {
      const booking = doc.data();
      const bookingStart = new Date(booking.startDate);
      const bookingEnd = new Date(booking.endDate);

      const isOverlap = start <= bookingEnd && end >= bookingStart;

      if (isOverlap) {
        reservedDuringPeriod += booking.quantity;
      }
    });

    const availableForPeriod = carData.available - reservedDuringPeriod;

    if (availableForPeriod < quantity) {
      return res.status(400).json({
        message: 'Недостатньо авто на вибрані дати',
        available: availableForPeriod,
      });
    }

    await db.collection('bookings').add({
      carId,
      userId,
      quantity,
      startDate,
      endDate,
      createdAt: new Date().toISOString(),
    });

    res.status(200).json({ message: 'Бронювання успішно створено' });
  } catch (error) {
    res.status(500).json({ message: 'Внутрішня помилка сервера' });
  }
});

router.get('/',  authenticateToken, async (req, res) => {
  const uid = req.user.userId;

  try {
    const snapshot = await db.collection('bookings')
      .where('userId', '==', uid)
      .get();

    if (snapshot.empty) {
      return res.status(200).json([]); 
    }

    const bookings = snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
    }));

    res.status(200).json(bookings);
  } catch (error) {
    res.status(500).json({ message: 'Помилка на сервері' });
  }
});

router.delete('/:bookingId', authenticateToken, async (req, res) => {
  const { bookingId } = req.params;

  try {
    const bookingRef = db.collection('bookings').doc(bookingId);
    const bookingSnap = await bookingRef.get();

    if (!bookingSnap.exists) {
      return res.status(404).json({ message: 'Бронювання не знайдено' });
    }

    const bookingData = bookingSnap.data();
    const carRef = db.collection('cars').doc(bookingData.carId);
    const carSnap = await carRef.get();

    if (!carSnap.exists) {
      return res.status(404).json({ message: 'Автомобіль не знайдено' });
    }

    const carData = carSnap.data();

    await carRef.update({
      available: carData.available + bookingData.quantity,
    });

    await bookingRef.delete();

    res.status(200).json({ message: 'Бронювання успішно скасовано' });
  } catch (error) {
    res.status(500).json({ message: 'Внутрішня помилка сервера' });
  }
});

module.exports = router;
